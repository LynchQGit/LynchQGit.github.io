{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Home","text":"\u97e9\u6797\u5947\u7684\u4e2a\u4eba\u535a\u5ba2  <p> \ud83c\udfe0\u6b22\u8fce\u8bbf\u95ee\u6211\u7684\u535a\u5ba2\uff01 </p> <p> </p>"},{"location":"#_1","title":"\u5728\u7ebf\u8bbf\u95ee","text":"<p>\u5728\u7ebf\u9605\u8bfb\u535a\u5ba2: https://lynchqgit.github.io/</p>"},{"location":"%E7%BC%96%E7%A0%81/Python/GIL/","title":"GIL","text":"<p>GIL\uff08Global Interpreter Lock\uff09\u662f Python \u89e3\u91ca\u5668\u6240\u4f7f\u7528\u7684\u4e00\u79cd\u673a\u5236\uff0c\u5b83\u662f\u4e00\u4e2a\u4e92\u65a5\u9501\uff0c\u7528\u4e8e\u5728\u4efb\u610f\u65f6\u523b\u4fdd\u8bc1\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u6267\u884c Python \u5b57\u8282\u7801\u3002\u8fd9\u610f\u5473\u7740\u5728\u591a\u7ebf\u7a0b Python \u7a0b\u5e8f\u4e2d\uff0c\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u6267\u884c Python \u4ee3\u7801\uff0c\u5373\u4f7f\u6709\u591a\u4e2a CPU \u6838\u5fc3\u4e5f\u65e0\u6cd5\u5145\u5206\u5229\u7528\u3002</p> <p>\u7531\u4e8e GIL \u7684\u5b58\u5728\uff0c\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u5728 CPU \u5bc6\u96c6\u578b\u4efb\u52a1\u4e0a\u53ef\u80fd\u4f1a\u8868\u73b0\u51fa\u76f8\u5bf9\u8f83\u5dee\u7684\u6027\u80fd\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u6267\u884c Python \u4ee3\u7801\uff0c\u800c\u5176\u4ed6\u7684\u7ebf\u7a0b\u53ea\u80fd\u7b49\u5f85 GIL \u7684\u91ca\u653e\u3002\u4f46\u662f\u5728 I/O \u5bc6\u96c6\u578b\u4efb\u52a1\u4e0a\uff0c\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4ecd\u7136\u53ef\u4ee5\u8868\u73b0\u51fa\u826f\u597d\u7684\u6027\u80fd\uff0c\u56e0\u4e3a I/O \u64cd\u4f5c\u901a\u5e38\u4f1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\uff0c\u7b49\u5f85 I/O \u5b8c\u6210\uff0c\u6b64\u65f6 GIL \u4f1a\u88ab\u91ca\u653e\uff0c\u5141\u8bb8\u5176\u4ed6\u7ebf\u7a0b\u6267\u884c Python \u4ee3\u7801\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cGIL \u4e0d\u662f Python \u8bed\u8a00\u672c\u8eab\u7684\u9650\u5236\uff0c\u800c\u662f\u89e3\u91ca\u5668\u5b9e\u73b0\u7684\u9650\u5236\u3002\u4e0d\u540c\u7684\u89e3\u91ca\u5668\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4f8b\u5982 Jython \u548c IronPython \u7b49\u89e3\u91ca\u5668\u5c31\u6ca1\u6709 GIL\u3002</p> <p>\u5f53\u4f7f\u7528 C \u6269\u5c55\u6a21\u5757\u65f6\uff0c\u8fd9\u4e9b\u6269\u5c55\u6a21\u5757\u53ef\u80fd\u4f1a\u7ed5\u8fc7 GIL\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4f7f\u7528 Python \u5b57\u8282\u7801\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4e00\u4e2a C \u6269\u5c55\u6a21\u5757\u6267\u884c\u7684\u662f CPU \u5bc6\u96c6\u578b\u4efb\u52a1\uff0c\u5b83\u53ef\u4ee5\u5145\u5206\u5229\u7528\u591a\u4e2a CPU \u6838\u5fc3\uff0c\u800c\u4e0d\u53d7 GIL \u7684\u9650\u5236\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c C \u6269\u5c55\u6a21\u5757\u4e0e Python \u4ee3\u7801\u5171\u4eab\u540c\u4e00\u5757\u6570\u636e\uff0c\u9700\u8981\u8fdb\u884c\u9002\u5f53\u7684\u540c\u6b65\u4ee5\u907f\u514d\u6570\u636e\u7ade\u4e89\u7b49\u95ee\u9898\u3002</p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/","title":"Pydantic","text":"<p>pydantic\u5e93\u662f\u4e00\u79cd\u5e38\u7528\u7684\u7528\u4e8e\u6570\u636e\u63a5\u53e3 schema \u5b9a\u4e49\u4e0e\u68c0\u67e5\u7684\u5e93\u3002</p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#_1","title":"\u4e00\u3001\u57fa\u672c\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#11-schema","title":"1.1 schema\u57fa\u672c\u5b9a\u4e49\u65b9\u6cd5","text":"<p>pydantic\u5e93\u7684\u6570\u636e\u5b9a\u4e49\u65b9\u5f0f\u662f\u901a\u8fc7BaseModel\u7c7b\u6765\u8fdb\u884c\u5b9a\u4e49\u7684\uff0c\u6240\u6709\u57fa\u4e8epydantic\u7684\u6570\u636e\u7c7b\u578b\u672c\u8d28\u4e0a\u90fd\u662f\u4e00\u4e2aBaseModel\u7c7b\u3002 <pre><code>from pydantic import BaseModel\n\nclass Person(BaseModel):\n    name:str\n</code></pre></p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#12-schema","title":"1.2 schema\u57fa\u672c\u5b9e\u4f8b\u5316\u65b9\u6cd5","text":"<p>\u76f4\u63a5\u4f20\u503c <pre><code>p = Person(name=\"Tom\")\nprint(p.json()). # {\"name\":\"Tom\"}\n</code></pre> \u901a\u8fc7\u5b57\u5178\u4f20\u5165 <pre><code>p = {\"name\": \"Tom\"}\np = Persoon(**p)\nprint(p.json()). # {\"name\":\"Tom\"}\n</code></pre> \u901a\u8fc7\u5176\u4ed6\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4f20\u5165 <pre><code>p2 = Person.copy(p)\nprint(p2.json()) # {\"name\": \"Tom\"}\n</code></pre> \u5f53\u4f20\u9519\u503c\u65f6\u5c31\u4f1a\u62a5\u9519 \u5f53\u4f20\u5165\u591a\u4f59\u5b9a\u4e49\u503c\u65f6\uff0cBaseModel\u4e5f\u4f1a\u8fdb\u884c\u8fc7\u6ee4 <pre><code>p = Person(name=\"Tom\", gender=\"man\", age=24)\nprint(p.json()) # {\"name\": \"Tom\"}\n</code></pre> \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6570\u636e\u7684\u4f20\u9012\u5c06\u4f1a\u66f4\u4e3a\u5b89\u5168\uff0c\u4f46\u662f\uff0c\u540c\u6837\u7684\uff0c\u8fd9\u4e5f\u8981\u6c42\u6211\u4eec\u5728\u524d\u671f\u7684schema\u5b9a\u4e49\u4e2d\u5fc5\u987b\u8981\u5c3d\u53ef\u80fd\u5730\u5b9a\u4e49\u5b8c\u5168\u3002</p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#13-pydantic","title":"1.3 pydantic\u57fa\u672c\u6570\u636e\u7c7b\u578b","text":"<pre><code>from pydantic import BaseModel\nfrom typing import Dict, List, Sequence, Set, Tuple\n\nclass Demo(BaseModel):\n    a: int             # \u6574\u578b\n    b: float           # \u6d6e\u70b9\u578b\n    c: str             # \u5b57\u7b26\u4e32\n    d: bool            # \u5e03\u5c14\u578b\n    e: List[int]       # \u6574\u578b\u5217\u8868\n    f: Dict[str, int]  # \u5b57\u5178\u578b\uff0ckey\u4e3astr\uff0cvalue\u4e3aint\n    g: Set[int]        # \u96c6\u5408\n    h: Tuple[str, int] # \u5143\u7ec4\n</code></pre>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#_2","title":"\u4e8c\u3001\u9ad8\u7ea7\u6570\u636e\u7c7b\u578b","text":""},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#21-enum","title":"2.1 enum\u6570\u636e\u7c7b\u578b","text":"<pre><code>from enum import Enum\n\nclass Gender(str, Enum):\n    man = \"man\"\n    women = \"women\"\n</code></pre>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#22","title":"2.2 \u53ef\u9009\u6570\u636e\u7c7b\u578b","text":"<p>\u5982\u679c\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u53ef\u4ee5\u5141\u8bb8\u7528\u6237\u5728\u4f7f\u7528\u4e2d\u4e0d\u8fdb\u884c\u4f20\u5165\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528typing\u5e93\u4e2d\u7684Optional\u65b9\u6cd5\u8fdb\u884c\u5b9e\u73b0\u3002 <pre><code>from typing import Optional\nfrom pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n    age: Optional[int]\n</code></pre> \u8bbe\u7f6e\u4e3a\u53ef\u9009\u4e4b\u540e\uff0c\u6570\u636e\u4e2d\u4ecd\u7136\u4f1a\u6709age\u5b57\u6bb5\uff0c\u4f46\u662f\u5176\u9ed8\u8ba4\u503c\u4e3aNone\uff0c\u5373\u5f53\u4e0d\u4f20\u5165age\u5b57\u6bb5\u65f6\uff0cPerson\u4ecd\u7136\u53ef\u4ee5\u53d6\u5230age\uff0c\u53ea\u662f\u5176\u503c\u4e3aNone <pre><code>p = Person(name=\"Tom\")\nprint(p.json()) # {\"name\": \"Tom\", \"age\": None}\n</code></pre></p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#23","title":"2.3 \u6570\u636e\u9ed8\u8ba4\u503c\u7684\u8bbe\u7f6e","text":"<p>\u53ef\u9009\u6570\u636e\u7c7b\u578b\u65b9\u6cd5\u4e8b\u5b9e\u4e0a\u662f\u4e00\u79cd\u8f83\u4e3a\u7279\u6b8a\u7684\u7ed9\u4e88\u6570\u636e\u9ed8\u8ba4\u503c\u7684\u65b9\u6cd5\uff0c\u53ea\u662f\u7ed9\u5176\u7684\u9ed8\u8ba4\u503c\u4e3aNone\u3002 \u53ef\u4ee5\u7ed9\u51fa\u4e00\u4e9b\u66f4\u52a0\u4e00\u822c\u6027\u7684\u7ed9\u51fa\u6570\u636e\u9ed8\u8ba4\u503c\u7684\u65b9\u6cd5 <pre><code>from pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n    gender: str = \"man\"\n\np = Person(name=\"Tom\")\nprint(p.json()) # {\"name\": \"Tom\", \"gender\": \"man\"}\n</code></pre></p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#24","title":"2.4 \u5141\u8bb8\u591a\u79cd\u6570\u636e\u7c7b\u578b","text":"<p>\u5982\u679c\u4e00\u4e2a\u6570\u636e\u53ef\u4ee5\u5141\u8bb8\u591a\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7typing\u5e93\u4e2d\u7684Union\u65b9\u6cd5\u8fdb\u884c\u5b9e\u73b0\u3002 <pre><code>from typing import Union\nfrom pydantic import BaseModel\n\nclass Time(BaseModel):\n    time: Union[int, str]\n\nt = Time(time=12345)\nprint(t.json()) # {\"time\": 12345}\nt = Time(time = \"2020-7-29\")\nprint(t.json()) # {\"time\": \"2020-7-29\"}\n</code></pre></p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#25","title":"2.5 \u5f02\u540d\u6570\u636e\u4f20\u9012\u65b9\u6cd5","text":"<p>\u5047\u8bbe\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u5b9a\u4e49\u4e86\u4e00\u4e2aschema\uff0c\u5c06\u5176\u4e2d\u67d0\u4e00\u4e2a\u53c2\u91cf\u547d\u540d\u4e3a\u4e86A\uff0c\u4f46\u662f\u5728\u540e\u7eed\u7684\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u91cf\u88ab\u547d\u540d\u4e3aB\uff0c\u8981\u5982\u4f55\u5b8c\u6210\u8fd9\u4e24\u4e2a\u4e0d\u540c\u540d\u79f0\u53c2\u91cf\u7684\u76f8\u4e92\u4f20\u9012 \u53ef\u4ee5\u4f7f\u7528 \u201calias\u201d <pre><code>from pydantic import BaseModel, Field\n\nclass Password(BaseModel):\n    password: str = Field(alias = \"key\")\n</code></pre> \u4f46\u662f\u5728\u4f20\u5165\u65f6\uff0c\u6211\u4eec\u9700\u8981\u7528key\u5173\u952e\u8bcd\u6765\u4f20\u5165password\u53d8\u91cf\u3002 <pre><code>p = Password(key=\"123456\")\nprint(p.json()) # {\"password\": \"123456\"}\n</code></pre></p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#schema","title":"\u4e09\u3001\u591a\u7ea7schema\u5b9a\u4e49","text":"<p>\u8f83\u4e3a\u590d\u6742\u7684\u57fa\u4e8epydantic\u7684schema\u5b9a\u4e49\u5b9e\u73b0\u6837\u4f8b\u3002 <pre><code>from enum import Enum\nfrom typing import List, Union\nfrom datetime import date\nfrom pydantic import BaseModel\n\nclass Gender(str, Enum):\n    man = \"man\"\n    women = \"women\"\n\nclass Person(BaseModel):\n    name : str\n    gender : Gender\n\nclass Department(BaseModel):\n    name : str\n    lead : Person\n    cast : List[Person]\n\nclass Group(BaseModel):\n    owner: Person\n    member_list: List[Person] = []\n\nclass Company(BaseModel):\n    name: str\n    owner: Union[Person, Group]\n    regtime: date\n    department_list: List[Department] = []\n</code></pre> \u6211\u4eec\u9664\u4e86\u53ef\u4ee5\u4e00\u6b65\u4e00\u6b65\u5730\u5b9e\u4f8b\u5316\u4e4b\u5916\uff0c\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684Company\u7684\u5185\u5bb9\u5b57\u5178\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e00\u6b65\u5230\u4f4d\u5730\u8fdb\u884c\u5b9e\u4f8b\u5316 <pre><code>sales_department = {\n    \"name\": \"sales\",\n    \"lead\": {\"name\": \"Sarah\", \"gender\": \"women\"},\n    \"cast\": [\n        {\"name\": \"Sarah\", \"gender\": \"women\"},\n        {\"name\": \"Bob\", \"gender\": \"man\"},\n        {\"name\": \"Mary\", \"gender\": \"women\"}\n    ]\n}\n\nresearch_department = {\n    \"name\": \"research\",\n    \"lead\": {\"name\": \"Allen\", \"gender\": \"man\"},\n    \"cast\": [\n        {\"name\": \"Jane\", \"gender\": \"women\"},\n        {\"name\": \"Tim\", \"gender\": \"man\"}\n    ]\n}\n\ncompany = {\n    \"name\": \"Fantasy\",\n    \"owner\": {\"name\": \"Victor\", \"gender\": \"man\"},\n    \"regtime\": \"2020-7-23\",\n    \"department_list\": [\n        sales_department,\n        research_department\n    ]\n}\n\ncompany = Company(**company)\n</code></pre></p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#_3","title":"\u56db\u3001\u6570\u636e\u68c0\u67e5\u65b9\u6cd5\u8003\u5bdf","text":"<p>pydantic\u672c\u8eab\u63d0\u4f9b\u4e86\u4e0a\u8ff0\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e\u68c0\u67e5\u65b9\u6cd5\uff0c\u4f46\u662f\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528validator\u548cconfig\u65b9\u6cd5\u6765\u5b9e\u73b0\u66f4\u4e3a\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\u4ee5\u53ca\u68c0\u67e5</p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#41-validator","title":"4.1 validator\u7528\u6cd5\u8003\u5bdf","text":"<p>\u7528validator\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6570\u636e\u8fdb\u884c\u66f4\u4e3a\u590d\u6742\u7684\u6570\u636e\u68c0\u67e5 <pre><code>import re\nfrom pydantic import BaseModel, validator\n\nclass Password(BaseModel):\n    password: str\n\n    @validator(\"password\")\n    def password_rule(cls, password):\n        def is_valid(password):\n            if len(password) &lt; 6 or len(password) &gt; 20:\n                return False\n            if not re.search(\"[a-z]\", password):\n                return False\n            if not re.search(\"[A-Z]\", password):\n                return False\n            if not re.search(\"\\d\", password):\n                return False\n            return True\n        if not is_valid(password):\n            raise ValueError(\"password is invalid\")\n</code></pre> \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u989d\u5916\u5bf9\u5bc6\u7801\u7c7b\u8fdb\u884c\u683c\u5f0f\u8981\u6c42\uff0c\u5bf9\u5176\u5b57\u7b26\u6570\u4ee5\u53ca\u5185\u90e8\u5b57\u7b26\u8fdb\u884c\u8981\u6c42\u3002</p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#42-config","title":"4.2 Config\u65b9\u6cd5\u8003\u5bdf","text":"<p>\u5982\u679c\u8981\u5bf9BaseModel\u4e2d\u7684\u67d0\u4e00\u57fa\u672c\u578b\u8fdb\u884c\u7edf\u4e00\u7684\u683c\u5f0f\u8981\u6c42\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528Config\u65b9\u6cd5\u6765\u5b9e\u73b0 <pre><code>from pydantic import BaseModel\n\nclass Password(BaseModel):\n    password: str\n\n    class Config:\n        min_anystr_length = 6 # \u4ee4Password\u7c7b\u4e2d\u6240\u6709\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5747\u8981\u4e0d\u5c11\u4e8e6\n        max_anystr_length = 20 # \u4ee4Password\u7c7b\u4e2d\u6240\u6709\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5747\u8981\u4e0d\u5927\u4e8e20\n</code></pre> \u6709\u5173Config\u7c7b\u4e2d\u7684\u7279\u6b8a\u5173\u952e\u8bcd\u540d\u79f0\uff0c\u8fd9\u91cc\u53ea\u7ed9\u51fa\u4e86\u4e24\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u66f4\u591a\u7684\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51</p>"},{"location":"%E7%BC%96%E7%A0%81/Python/Pydantic/#_4","title":"\u4e94\u3001\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>https://pydantic-docs.helpmanual.io/</li> <li>https://blog.csdn.net/swinfans/article/details/89629641</li> </ul>"}]}